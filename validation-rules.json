[
    {
        "name": "Code Quality",
        "description": "Code should follow best practices, be readable, and well-structured. Check for proper naming conventions, code organization, and maintainability.",
        "required": true,
        "patterns": [
            "TODO",
            "FIXME",
            "HACK"
        ]
    },
    {
        "name": "Security",
        "description": "No security vulnerabilities, sensitive data exposure, or unsafe practices. Check for SQL injection, XSS, hardcoded secrets, and other security issues.",
        "required": true,
        "patterns": [
            "password",
            "secret",
            "api_key",
            "private_key"
        ]
    },
    {
        "name": "Error Handling",
        "description": "Proper error handling and edge case coverage. Ensure exceptions are caught and handled appropriately.",
        "required": true
    },
    {
        "name": "Performance",
        "description": "Code should be efficient and not introduce performance regressions. Look for potential bottlenecks, memory leaks, or inefficient algorithms.",
        "required": false
    },
    {
        "name": "Documentation",
        "description": "Complex functions and classes should have proper documentation. JSDoc comments for public APIs are preferred.",
        "required": false
    },
    {
        "name": "Testing",
        "description": "New features should include appropriate unit tests. Test coverage should be maintained or improved.",
        "required": false
    },
    {
        "name": "Dependencies",
        "description": "New dependencies should be justified and up-to-date. Avoid unnecessary dependencies.",
        "required": false
    },
    {
        "name": "Code Style",
        "description": "Code should follow established style guidelines and formatting conventions.",
        "required": false
    }
]